import React, { useState } from 'react';

/**
 * Sidebar Component - Menu b√™n tr√°i c·ªßa ·ª©ng d·ª•ng
 * 
 * Concepts t·ª´ Day 1-7:
 * - Components & Props (Day 2): Nh·∫≠n props v√† render menu items
 * - State Management (Day 4): Qu·∫£n l√Ω tr·∫°ng th√°i collapsed/expanded
 * - Event Handling (Day 5): X·ª≠ l√Ω click events
 * - Conditional Rendering (Day 3 & 6): Hi·ªÉn th·ªã menu items d·ª±a tr√™n props
 * - Advanced Lists (Day 7): Render danh s√°ch menu items v·ªõi map
 */

const Sidebar = ({ 
  currentPage,        // Props: trang hi·ªán t·∫°i ƒë·ªÉ highlight (Day 2)
  onPageChange,       // Props: function thay ƒë·ªïi trang (Day 2)
  userProgress,       // Props: ti·∫øn ƒë·ªô h·ªçc c·ªßa user (Day 2)
  isCollapsed,        // Props: tr·∫°ng th√°i thu g·ªçn sidebar (Day 2)
  onToggleCollapse    // Props: function toggle collapsed state (Day 2)
}) => {
  
  /**
   * State Management (Day 4): Qu·∫£n l√Ω tr·∫°ng th√°i c·ªßa submenu
   */
  const [expandedMenus, setExpandedMenus] = useState(['courses']); // M·∫∑c ƒë·ªãnh expand courses menu

  /**
   * Menu items data structure
   * Advanced Lists (Day 7): D·ªØ li·ªáu cho vi·ªác render menu
   */
  const menuItems = [
    {
      id: 'dashboard',
      title: 'Dashboard',
      icon: 'üìä',
      path: 'dashboard',
      description: 'T·ªïng quan h·ªçc t·∫≠p'
    },
    {
      id: 'courses',
      title: 'Kh√≥a h·ªçc',
      icon: 'üìö',
      path: 'courses',
      description: 'Danh s√°ch kh√≥a h·ªçc',
      submenu: [
        { id: 'all-courses', title: 'T·∫•t c·∫£ kh√≥a h·ªçc', path: 'courses/all' },
        { id: 'my-courses', title: 'Kh√≥a h·ªçc c·ªßa t√¥i', path: 'courses/my' },
        { id: 'favorites', title: 'Y√™u th√≠ch', path: 'courses/favorites' },
        { id: 'completed', title: 'ƒê√£ ho√†n th√†nh', path: 'courses/completed' }
      ]
    },
    {
      id: 'progress',
      title: 'Ti·∫øn ƒë·ªô',
      icon: 'üìà',
      path: 'progress',
      description: 'Theo d√µi ti·∫øn ƒë·ªô h·ªçc'
    },
    {
      id: 'exercises',
      title: 'B√†i t·∫≠p',
      icon: 'üí™',
      path: 'exercises',
      description: 'Luy·ªán t·∫≠p coding',
      submenu: [
        { id: 'daily-challenge', title: 'Th·ª≠ th√°ch h√†ng ng√†y', path: 'exercises/daily' },
        { id: 'practice', title: 'Luy·ªán t·∫≠p', path: 'exercises/practice' },
        { id: 'assignments', title: 'B√†i t·∫≠p ƒë∆∞·ª£c giao', path: 'exercises/assignments' }
      ]
    },
    {
      id: 'community',
      title: 'C·ªông ƒë·ªìng',
      icon: 'üë•',
      path: 'community',
      description: 'K·∫øt n·ªëi v·ªõi h·ªçc vi√™n kh√°c'
    },
    {
      id: 'resources',
      title: 'T√†i li·ªáu',
      icon: 'üìñ',
      path: 'resources',
      description: 'T√†i li·ªáu tham kh·∫£o'
    }
  ];

  /**
   * Event Handling (Day 5): X·ª≠ l√Ω click menu item
   */
  const handleMenuClick = (item) => {
    console.log('Menu clicked:', item.title); // Debug log
    
    // N·∫øu c√≥ submenu, toggle expand/collapse
    if (item.submenu) {
      toggleSubmenu(item.id);
    } else {
      // N·∫øu kh√¥ng c√≥ submenu, chuy·ªÉn trang
      onPageChange && onPageChange(item.path);
    }
  };

  /**
   * State Management (Day 4): Toggle submenu expansion
   */
  const toggleSubmenu = (menuId) => {
    setExpandedMenus(prev => {
      // N·∫øu menu ƒë√£ expanded, thu g·ªçn n√≥
      if (prev.includes(menuId)) {
        return prev.filter(id => id !== menuId);
      } else {
        // N·∫øu menu ch∆∞a expanded, m·ªü r·ªông n√≥
        return [...prev, menuId];
      }
    });
  };

  /**
   * Event Handling (Day 5): X·ª≠ l√Ω click submenu item
   */
  const handleSubmenuClick = (subItem, parentItem) => {
    console.log('Submenu clicked:', subItem.title, 'in', parentItem.title); // Debug log
    onPageChange && onPageChange(subItem.path);
  };

  /**
   * Utility function: Ki·ªÉm tra menu item c√≥ active kh√¥ng
   * Conditional Rendering (Day 3): Logic ƒë·ªÉ x√°c ƒë·ªãnh active state
   */
  const isMenuActive = (path) => {
    return currentPage === path || currentPage?.startsWith(path + '/');
  };

  /**
   * Utility function: T√≠nh ph·∫ßn trƒÉm ti·∫øn ƒë·ªô
   * Advanced Lists (Day 7): X·ª≠ l√Ω data calculations
   */
  const getProgressPercentage = () => {
    if (!userProgress) return 0;
    const total = userProgress.totalLessons || 1;
    const completed = userProgress.completedLessons || 0;
    return Math.round((completed / total) * 100);
  };

  return (
    // JSX (Day 1): C·∫•u tr√∫c sidebar v·ªõi conditional classes
    <aside className={`sidebar ${isCollapsed ? 'collapsed' : ''}`}>
      
      {/* Sidebar Header */}
      <div className="sidebar-header">
        {/* Conditional Rendering (Day 6): Hi·ªÉn th·ªã title khi kh√¥ng collapsed */}
        {!isCollapsed && (
          <h3 className="sidebar-title">Menu</h3>
        )}
        
        {/* Event Handling (Day 5): Toggle collapse button */}
        <button 
          className="collapse-toggle"
          onClick={onToggleCollapse}
          title={isCollapsed ? "M·ªü r·ªông menu" : "Thu g·ªçn menu"}
        >
          {/* Conditional Rendering (Day 3): Icon d·ª±a tr√™n collapsed state */}
          {isCollapsed ? '‚ñ∂Ô∏è' : '‚óÄÔ∏è'}
        </button>
      </div>

      {/* Progress Summary - ch·ªâ hi·ªÉn th·ªã khi kh√¥ng collapsed */}
      {!isCollapsed && userProgress && (
        <div className="progress-summary">
          <h4>Ti·∫øn ƒë·ªô h·ªçc t·∫≠p</h4>
          <div className="progress-bar">
            <div 
              className="progress-fill"
              style={{ width: `${getProgressPercentage()}%` }}
            />
          </div>
          <span className="progress-text">
            {userProgress.completedLessons || 0} / {userProgress.totalLessons || 0} b√†i h·ªçc
          </span>
        </div>
      )}

      {/* Menu Items */}
      <nav className="sidebar-nav">
        {/* Advanced Lists (Day 7): Render menu items v·ªõi map */}
        {menuItems.map(item => (
          <div key={item.id} className="menu-group">
            
            {/* Main menu item */}
            <div 
              className={`menu-item ${isMenuActive(item.path) ? 'active' : ''}`}
              onClick={() => handleMenuClick(item)}
            >
              <span className="menu-icon">{item.icon}</span>
              
              {/* Conditional Rendering (Day 6): Hi·ªÉn th·ªã text khi kh√¥ng collapsed */}
              {!isCollapsed && (
                <>
                  <span className="menu-text">{item.title}</span>
                  
                  {/* Conditional Rendering (Day 3): Hi·ªÉn th·ªã expand icon n·∫øu c√≥ submenu */}
                  {item.submenu && (
                    <span className="expand-icon">
                      {expandedMenus.includes(item.id) ? 'üîΩ' : '‚ñ∂Ô∏è'}
                    </span>
                  )}
                </>
              )}
            </div>

            {/* Submenu items */}
            {/* Conditional Rendering (Day 3 & 6): Hi·ªÉn th·ªã submenu khi expanded v√† kh√¥ng collapsed */}
            {item.submenu && !isCollapsed && expandedMenus.includes(item.id) && (
              <div className="submenu">
                {/* Advanced Lists (Day 7): Render submenu items */}
                {item.submenu.map(subItem => (
                  <div 
                    key={subItem.id}
                    className={`submenu-item ${isMenuActive(subItem.path) ? 'active' : ''}`}
                    onClick={() => handleSubmenuClick(subItem, item)}
                  >
                    <span className="submenu-text">{subItem.title}</span>
                  </div>
                ))}
              </div>
            )}
          </div>
        ))}
      </nav>

      {/* Sidebar Footer - Quick Stats */}
      {!isCollapsed && (
        <div className="sidebar-footer">
          <div className="quick-stats">
            <div className="stat-item">
              <span className="stat-icon">üéØ</span>
              <div className="stat-info">
                <span className="stat-number">{userProgress?.streak || 0}</span>
                <span className="stat-label">Ng√†y li√™n ti·∫øp</span>
              </div>
            </div>
            <div className="stat-item">
              <span className="stat-icon">‚≠ê</span>
              <div className="stat-info">
                <span className="stat-number">{userProgress?.points || 0}</span>
                <span className="stat-label">ƒêi·ªÉm</span>
              </div>
            </div>
          </div>
        </div>
      )}
      
    </aside>
  );
};

export default Sidebar;
// =============================================================================
// DAY 2: JSX SYNTAX - CODE M·∫™U V·ªöI CH√ö TH√çCH CHI TI·∫æT
// =============================================================================

// 1. IMPORT REACT (c·∫ßn thi·∫øt ƒë·ªÉ s·ª≠ d·ª•ng JSX)
import React from 'react';

// =============================================================================
// B√ÄI T·∫¨P 1: CHUY·ªÇN ƒê·ªîI HTML SANG JSX
// =============================================================================

function ProductList() {
  // 2. RETURN JSX - L∆ØU √ù C√ÅC ƒêI·ªÇM KH√ÅC BI·ªÜT V·ªöI HTML
  return (
    // 3. PH·∫¢I C√ì M·ªòT PARENT ELEMENT (ho·∫∑c React Fragment)
    <div className="container"> {/* class -> className */}
      
      {/* 4. TI√äU ƒê·ªÄ CH√çNH */}
      <h1>Danh s√°ch s·∫£n ph·∫©m</h1>
      
      {/* 5. PRODUCT CARD */}
      <div className="product">
        {/* 6. IMG TAG - PH·∫¢I T·ª∞ ƒê√ìNG (self-closing) */}
        <img 
          src="product1.jpg"      // src attribute
          alt="S·∫£n ph·∫©m 1"        // alt cho accessibility
        /> {/* L∆∞u √Ω: <img /> ch·ª© kh√¥ng ph·∫£i <img> */}
        
        {/* 7. PRODUCT INFO */}
        <h3>iPhone 15</h3>
        
        {/* 8. PRICE v·ªõi className thay v√¨ class */}
        <p className="price">25,000,000 VNƒê</p>
        
        {/* 9. BUTTON v·ªõi EVENT HANDLER */}
        <button 
          onClick={() => console.log('Th√™m v√†o gi·ªè h√†ng')} // onClick (camelCase)
        >
          Th√™m v√†o gi·ªè h√†ng
        </button>
      </div>
      
      {/* 10. HR TAG - PH·∫¢I T·ª∞ ƒê√ìNG */}
      <hr /> {/* <hr /> ch·ª© kh√¥ng ph·∫£i <hr> */}
      
      {/* 11. FOOTER */}
      <footer>
        {/* 12. SPECIAL CHARACTERS - s·ª≠ d·ª•ng HTML entities ho·∫∑c Unicode */}
        <p>&copy; 2024 C·ª≠a h√†ng ƒëi·ªán tho·∫°i</p>
      </footer>
    </div>
  );
}

// =============================================================================
// B√ÄI T·∫¨P 2: S·ª¨ D·ª§NG BI·∫æN V√Ä EXPRESSIONS TRONG JSX
// =============================================================================

function PersonInfo() {
  // 13. ƒê·ªäNH NGHƒ®A DATA OBJECT
  // Trong th·ª±c t·∫ø, data n√†y c√≥ th·ªÉ ƒë·∫øn t·ª´ API, props, ho·∫∑c state
  const person = {
    firstName: "Nguy·ªÖn",
    lastName: "Minh", 
    age: 23,
    email: "minh.nguyen@email.com",
    hobbies: ["ƒë·ªçc s√°ch", "nghe nh·∫°c", "du l·ªãch"], // Array
    isStudent: true  // Boolean
  };

  // 14. C√ÅC HELPER FUNCTIONS (c√≥ th·ªÉ t√≠nh to√°n tr∆∞·ªõc khi render)
  const fullName = `${person.firstName} ${person.lastName}`;
  const birthYear = 2024 - person.age;
  const hobbyCount = person.hobbies.length;

  return (
    // 15. CONTAINER v·ªõi className
    <div className="person-card">
      
      {/* 16. TI√äU ƒê·ªÄ */}
      <h2>Th√¥ng tin c√° nh√¢n</h2>
      
      {/* 17. S·ª¨ D·ª§NG BI·∫æN TRONG JSX v·ªõi {} */}
      <p>
        <strong>H·ªç t√™n:</strong> {fullName} 
        {/* Ho·∫∑c c√≥ th·ªÉ vi·∫øt: {person.firstName} {person.lastName} */}
      </p>
      
      {/* 18. EXPRESSION T√çNH TO√ÅN TR·ª∞C TI·∫æP */}
      <p>
        <strong>Tu·ªïi:</strong> {person.age} (sinh nƒÉm {birthYear})
      </p>
      
      {/* 19. EMAIL */}
      <p>
        <strong>Email:</strong> {person.email}
      </p>
      
      {/* 20. CONDITIONAL (TERNARY) OPERATOR */}
      <p>
        <strong>Tr·∫°ng th√°i:</strong> {person.isStudent ? "Sinh vi√™n" : "ƒêi l√†m"}
        {/* C√∫ ph√°p: condition ? trueValue : falseValue */}
      </p>
      
      {/* 21. S·ª¨ D·ª§NG ARRAY.LENGTH */}
      <p>
        <strong>S·ªë s·ªü th√≠ch:</strong> {hobbyCount}
      </p>
    </div>
  );
}

// B√†i t·∫≠p 3: Ch√†o theo th·ªùi gian
function TimeGreeting() {
  const currentHour = new Date().getHours();
  
  const greeting = currentHour >= 5 && currentHour < 12 
    ? "Ch√†o bu·ªïi s√°ng!" 
    : currentHour >= 12 && currentHour < 18 
    ? "Ch√†o bu·ªïi chi·ªÅu!"
    : currentHour >= 18 && currentHour < 22
    ? "Ch√†o bu·ªïi t·ªëi!"
    : "Ch√∫c ng·ªß ngon!";

  return (
    <div>
      <h1>{greeting}</h1>
      <p>Hi·ªán t·∫°i l√† {currentHour}h</p>
    </div>
  );
}

// B√†i t·∫≠p 4: Card s·∫£n ph·∫©m v·ªõi styling
function ProductCard() {
  const product = {
    name: "Laptop Dell XPS 13",
    price: 35000000,
    image: "https://via.placeholder.com/300x200",
    inStock: true,
    discount: 10
  };

  const originalPrice = product.price;
  const discountedPrice = product.price * (1 - product.discount / 100);

  return (
    <div className="product-card" style={{
      border: '1px solid #ddd',
      borderRadius: '8px',
      padding: '16px',
      maxWidth: '300px',
      margin: '16px'
    }}>
      <img 
        src={product.image} 
        alt={product.name}
        style={{ width: '100%', borderRadius: '4px' }}
      />
      <h3>{product.name}</h3>
      
      <div>
        {product.discount > 0 ? (
          <>
            <span style={{ 
              color: 'red', 
              textDecoration: 'line-through',
              marginRight: '10px'
            }}>
              {originalPrice.toLocaleString()} VNƒê
            </span>
            <span style={{ color: 'blue', fontWeight: 'bold' }}>
              {discountedPrice.toLocaleString()} VNƒê
            </span>
            <span style={{ 
              backgroundColor: 'red', 
              color: 'white', 
              padding: '2px 6px',
              borderRadius: '4px',
              fontSize: '12px',
              marginLeft: '10px'
            }}>
              -{product.discount}%
            </span>
          </>
        ) : (
          <span style={{ color: 'blue', fontWeight: 'bold' }}>
            {originalPrice.toLocaleString()} VNƒê
          </span>
        )}
      </div>

      <p style={{ 
        color: product.inStock ? 'green' : 'gray',
        fontWeight: 'bold'
      }}>
        {product.inStock ? "C√≤n h√†ng" : "H·∫øt h√†ng"}
      </p>
    </div>
  );
}

// B√†i t·∫≠p 5: WeatherCard
function WeatherCard() {
  const weatherData = {
    city: "H√† N·ªôi",
    temperature: 28,
    condition: "sunny",
    humidity: 65,
    windSpeed: 12
  };

  const getWeatherIcon = (condition) => {
    switch(condition) {
      case 'sunny': return '‚òÄÔ∏è';
      case 'cloudy': return 'üå§Ô∏è';
      case 'rainy': return 'üåßÔ∏è';
      default: return 'üå§Ô∏è';
    }
  };

  const getBackgroundColor = (condition) => {
    switch(condition) {
      case 'sunny': return '#fff3cd';
      case 'cloudy': return '#f8f9fa';
      case 'rainy': return '#cff4fc';
      default: return '#f8f9fa';
    }
  };

  return (
    <div style={{
      backgroundColor: getBackgroundColor(weatherData.condition),
      padding: '20px',
      borderRadius: '12px',
      textAlign: 'center',
      maxWidth: '250px',
      margin: '20px auto',
      boxShadow: '0 2px 8px rgba(0,0,0,0.1)'
    }}>
      <h2>{weatherData.city}</h2>
      <div style={{ fontSize: '48px', margin: '10px 0' }}>
        {getWeatherIcon(weatherData.condition)}
      </div>
      <div style={{ fontSize: '36px', fontWeight: 'bold', margin: '10px 0' }}>
        {weatherData.temperature}¬∞C
      </div>
      <div style={{ fontSize: '14px', color: '#666' }}>
        <p>ƒê·ªô ·∫©m: {weatherData.humidity}%</p>
        <p>T·ªëc ƒë·ªô gi√≥: {weatherData.windSpeed} km/h</p>
      </div>
    </div>
  );
}

export { ProductList, PersonInfo, TimeGreeting, ProductCard, WeatherCard };